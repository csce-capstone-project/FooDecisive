[{"/Users/phamtay/Github/FooDecisive/frontend/src/index.js":"1","/Users/phamtay/Github/FooDecisive/frontend/src/reportWebVitals.js":"2","/Users/phamtay/Github/FooDecisive/frontend/src/App.js":"3","/Users/phamtay/Github/FooDecisive/frontend/src/components/BigSearchBar/Search.js":"4","/Users/phamtay/Github/FooDecisive/frontend/src/components/Favorites/Favorites.js":"5","/Users/phamtay/Github/FooDecisive/frontend/src/components/Login/Login.js":"6","/Users/phamtay/Github/FooDecisive/frontend/src/components/Home/Home.js":"7","/Users/phamtay/Github/FooDecisive/frontend/src/components/NavBar/NavBar.js":"8","/Users/phamtay/Github/FooDecisive/frontend/src/components/Register/Register.js":"9","/Users/phamtay/Github/FooDecisive/frontend/src/components/Favorites/FavoritesList.js":"10","/Users/phamtay/Github/FooDecisive/frontend/src/services/authentication.js":"11","/Users/phamtay/Github/FooDecisive/frontend/src/components/RestaurantDetail/List.js":"12","/Users/phamtay/Github/FooDecisive/frontend/src/components/BigSearchBar/BigSearchBar.js":"13","/Users/phamtay/Github/FooDecisive/frontend/src/services/yelp.js":"14","/Users/phamtay/Github/FooDecisive/frontend/src/services/witai.js":"15","/Users/phamtay/Github/FooDecisive/frontend/src/components/Favorites/FavoritesDetail.js":"16","/Users/phamtay/Github/FooDecisive/frontend/src/components/RestaurantDetail/map.js":"17","/Users/phamtay/Github/FooDecisive/frontend/src/components/RestaurantDetail/Detail.js":"18","/Users/phamtay/Github/FooDecisive/frontend/src/components/ChatBot/ChatBot.js":"19","/Users/phamtay/Github/FooDecisive/frontend/src/Context.js":"20","/Users/phamtay/Github/FooDecisive/frontend/src/Hooks/useLocation.js":"21","/Users/phamtay/Github/FooDecisive/frontend/src/components/Recommendations/Recs.js":"22","/Users/phamtay/Github/FooDecisive/frontend/src/components/Profile/Profile.js":"23","/Users/phamtay/Github/FooDecisive/frontend/src/components/Chat/Chat.js":"24","/Users/phamtay/Github/FooDecisive/frontend/src/components/RestaurantContainer/RestaurantContainer.js":"25","/Users/phamtay/Github/FooDecisive/frontend/src/components/Recommendations/RecsList.js":"26","/Users/phamtay/Github/FooDecisive/frontend/src/Hooks/useLoading.js":"27","/Users/phamtay/Github/FooDecisive/frontend/src/Constants.js":"28","/Users/phamtay/Github/FooDecisive/frontend/src/components/Bubble/index.js":"29","/Users/phamtay/Github/FooDecisive/frontend/src/components/ResizableTextarea/index.js":"30","/Users/phamtay/Github/FooDecisive/frontend/src/components/Restaurant/index.js":"31","/Users/phamtay/Github/FooDecisive/frontend/src/components/Recommendations/RecsDetail.js":"32","/Users/phamtay/Github/FooDecisive/frontend/src/components/Restaurant/Restaurant.js":"33","/Users/phamtay/Github/FooDecisive/frontend/src/components/ResizableTextarea/ResizableTextarea.js":"34","/Users/phamtay/Github/FooDecisive/frontend/src/components/Bubble/Bubble.js":"35"},{"size":720,"mtime":1616695774243,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1616695774243,"results":"38","hashOfConfig":"37"},{"size":2573,"mtime":1617742919815,"results":"39","hashOfConfig":"37"},{"size":1303,"mtime":1617150314844,"results":"40","hashOfConfig":"37"},{"size":1821,"mtime":1617742919816,"results":"41","hashOfConfig":"37"},{"size":2265,"mtime":1617742919819,"results":"42","hashOfConfig":"37"},{"size":10325,"mtime":1617743016136,"results":"43","hashOfConfig":"37"},{"size":5492,"mtime":1617742919819,"results":"44","hashOfConfig":"37"},{"size":1912,"mtime":1617742919820,"results":"45","hashOfConfig":"37"},{"size":466,"mtime":1616695774242,"results":"46","hashOfConfig":"37"},{"size":341,"mtime":1616695774243,"results":"47","hashOfConfig":"37"},{"size":398,"mtime":1616695774243,"results":"48","hashOfConfig":"37"},{"size":5059,"mtime":1617742919816,"results":"49","hashOfConfig":"37"},{"size":4061,"mtime":1617742919821,"results":"50","hashOfConfig":"37"},{"size":1284,"mtime":1617742919821,"results":"51","hashOfConfig":"37"},{"size":19607,"mtime":1617742919817,"results":"52","hashOfConfig":"37"},{"size":1214,"mtime":1616695774243,"results":"53","hashOfConfig":"37"},{"size":12959,"mtime":1617742919821,"results":"54","hashOfConfig":"37"},{"size":2009,"mtime":1617742919816,"results":"55","hashOfConfig":"37"},{"size":102,"mtime":1617742919815,"results":"56","hashOfConfig":"37"},{"size":423,"mtime":1617742919815,"results":"57","hashOfConfig":"37"},{"size":1835,"mtime":1617742919820,"results":"58","hashOfConfig":"37"},{"size":4570,"mtime":1617742919820,"results":"59","hashOfConfig":"37"},{"size":6521,"mtime":1617742919816,"results":"60","hashOfConfig":"37"},{"size":3240,"mtime":1617742919821,"results":"61","hashOfConfig":"37"},{"size":441,"mtime":1617742919820,"results":"62","hashOfConfig":"37"},{"size":294,"mtime":1617742919815,"results":"63","hashOfConfig":"37"},{"size":4084,"mtime":1617742919815,"results":"64","hashOfConfig":"37"},{"size":54,"mtime":1617742919816,"results":"65","hashOfConfig":"37"},{"size":87,"mtime":1617742919820,"results":"66","hashOfConfig":"37"},{"size":106,"mtime":1617742919820,"results":"67","hashOfConfig":"37"},{"size":19597,"mtime":1617742919820,"results":"68","hashOfConfig":"37"},{"size":4442,"mtime":1617742919820,"results":"69","hashOfConfig":"37"},{"size":2093,"mtime":1617742919820,"results":"70","hashOfConfig":"37"},{"size":1535,"mtime":1617742919816,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"qzylts",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/phamtay/Github/FooDecisive/frontend/src/index.js",[],["156","157"],"/Users/phamtay/Github/FooDecisive/frontend/src/reportWebVitals.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/App.js",["158","159","160"],"/Users/phamtay/Github/FooDecisive/frontend/src/components/BigSearchBar/Search.js",["161","162"],"import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { BigSearchBar } from '../BigSearchBar/BigSearchBar'\nimport { yelpREST } from '../../services/yelp';\nimport { List } from '../RestaurantDetail/List'\n\n\nconst useStyles = makeStyles((theme) => ({\n    about: {\n        padding: theme.spacing(3),\n        margin: '50px auto 10px',\n        maxWidth: '40%',\n        background: 'cyan'\n    },\n    content: {\n        padding: theme.spacing(4),\n        margin: '30px auto 10px',\n        maxWidth: '40%',\n        background: 'darkorchid'\n    }\n}));\n\n\n\nexport function Search() {\n    \n    const [results, setResults] = useState([]);\n\n    function searchYelp(term, location, sortBy) {\n        yelpREST.search(term, location, sortBy).then(businesses => {\n            console.log(businesses)\n            setResults(businesses)\n          })\n        // yelpREST('business/search', { params : {\n        //         term : term\n        //     }\n        // }).then(({ data }) => {\n        //     console.log(data)\n        //   })\n    }\n\n    \n\n    const classes = useStyles();\n    return(\n        <div className=\"App\" src=\"../../restaurant.jpg\">\n            <BigSearchBar searchYelp={searchYelp}/>\n            <List businesses={results}/>\n        </div>\n    );\n}","/Users/phamtay/Github/FooDecisive/frontend/src/components/Favorites/Favorites.js",["163","164","165","166","167"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {authFetch} from \"../../services/authentication\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { yelpBusID } from '../../services/yelp';\nimport {FavoritesList} from './FavoritesList';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  text: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\nexport function Favorites() {\n  const [results, setResults] = useState([]);\n\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    authFetch(\"/api/get_favorites\", { signal: signal }).then(res => {\n        return res.json()\n    }).then(res => {\n        console.log(res['businesses'])\n        let businesses = res['businesses']\n        \n        if (businesses !== undefined) {\n          let bus = []   \n          for(let i = 0; i < businesses.length; i++) {\n            bus.push(yelpBusID.searchByID(businesses[i][0]))\n          }  \n\n          Promise.all(bus).then((res) => {\n            return res\n          }).then((business) => {\n            setResults(business)\n          })\n        }\n\n    })\n\n\n    return function cleanup() {\n      abortController.abort()\n    }\n\n  }, [])\n\n  return(\n    <div>\n      {results.length != 0  ? <FavoritesList businesses={results} />\n      : <Container style={{margin: '0', position: 'absolute', top: '50%', left: '50%'}}>\n        <CircularProgress style={{color: 'orange'}}/>\n        </Container>}\n    </div>\n  );\n    \n}\n      ","/Users/phamtay/Github/FooDecisive/frontend/src/components/Login/Login.js",["168"],"import React, { useState, useEffect } from 'react'\nimport {Redirect} from 'react-router'\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport './Login.css'\nimport {login, useAuth} from \"../../services/authentication\"\nimport Container from \"@material-ui/core/Container\";\nimport Fade from 'react-reveal/Fade';\n\n\n\nexport function Login() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  // const history = useHistory();\n  const [logged] = useAuth();\n\n  function validate(){\n    return username.length > 0 && password.length >= 0;\n  }\n\n  const onSubmitClick = (e)=>{\n    e.preventDefault()\n    console.log(\"You pressed login\")\n    let opts = {\n      'username': username,\n      'password': password\n    }\n    console.log(opts)\n    fetch('/api/login', {\n      method: 'post',\n      body: JSON.stringify(opts)\n    }).then(r => r.json())\n      .then(token => {\n        if (token.access_token){\n          login(token)\n          console.log(token)\n          localStorage.setItem('user', username)          \n        }\n        else {\n          console.log(\"Please type in correct username/password\")\n        }\n      })\n\n      \n  }\n\n  const handleUsernameChange = (e) => {\n    setUsername(e.target.value)\n  }\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value)\n  }\n\n  return (\n    \n    <Container style={{margin: '0', position: 'absolute', top: '30%', left: '40%', maxWidth: '500px'}}>\n      <Fade>\n      {!logged ? <div>\n      <h2>Login</h2>\n      <Form onSubmit={onSubmitClick}>\n          <Form.Group controlId=\"user\">\n            <Form.Label>Username</Form.Label>\n            <Form.Control autoFocus type=\"text\" placeholder=\"Username\" value={username} onChange={handleUsernameChange} />\n          </Form.Group>\n          <Form.Group controlId=\"pass\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control type=\"password\" placeholder=\"Password\" value={password} onChange={handlePasswordChange} />\n          </Form.Group>\n          <Button type=\"submit\" style={{backgroundColor: 'orange'}} disabled={!validate()}>\n            Submit\n          </Button>\n      </Form>\n      </div>:\n      <Redirect to='/'/>}\n      </Fade>\n    </Container>\n    \n  )\n}","/Users/phamtay/Github/FooDecisive/frontend/src/components/Home/Home.js",["169","170","171","172","173","174","175","176"],"/Users/phamtay/Github/FooDecisive/frontend/src/components/NavBar/NavBar.js",["177","178"],"import React, { useState, useEffect } from 'react'\nimport { useHistory, Link } from \"react-router-dom\";\nimport {authFetch, useAuth, logout} from \"../../services/authentication\"\nimport './NavBar.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {Navbar, Nav, NavItem} from 'react-bootstrap';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n  purple: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n}));\n\nexport function HomeNavBar() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [logged] = useAuth();\n  const [username, setUser] = useState(\"\");\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const onClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n\n    const handleClick = (e) => {\n      logout()\n      history.push('/login')\n      setAnchorEl(false)\n    }\n\n\n    useEffect(() => {\n      authFetch(\"/api/protected\").then(response => {\n        if (response.status === 401){\n          setUser(\"Sorry you aren't authorized!\")\n          return null\n        }\n        return response.json()\n      }).then(response => {\n        if (response && response.message){\n          setUser(response.message)\n        }\n      })\n    }, [])\n\n      return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" style={{width:'100%'}}>\n    <Navbar.Brand href=\"#home\" style={{fontSize: '30px'}}>FooDecisive</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"/\" style={{fontSize: '25px'}}>Home</Nav.Link>\n      <Nav.Link href=\"/search\" style={{fontSize: '25px'}}>Search</Nav.Link>\n      {logged ? <Nav.Link href=\"/recs\" style={{fontSize: '25px'}}>Recommendations</Nav.Link> : <div></div>}\n      {logged ? <Nav.Link href=\"/favs\" style={{fontSize: '25px'}}>Favorites</Nav.Link> : <div></div>}\n      {logged ? <Nav.Link href=\"/chatbot\" style={{fontSize: '25px'}}>Chatbot</Nav.Link> : <div></div>}\n    </Nav>\n    <Nav inline>\n    {!logged ? <Nav.Link href=\"/register\" style={{fontSize: '25px'}}>Register</Nav.Link> : <div></div>}\n    {!logged ? <Nav.Link href=\"/login\" style={{fontSize: '25px'}}>Login</Nav.Link> : <div></div>}\n    {logged ? <div id=\"log\" className={classes.root}>\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={onClick}>\n             <Avatar>{String(localStorage.getItem('user'))[0]}</Avatar>\n             </Button>\n                <Menu\n                  id=\"simple-menu\"\n                  anchorEl={anchorEl}\n                  keepMounted\n                  open={Boolean(anchorEl)}\n                  onClose={handleClose}\n                >\n                  <MenuItem component={Link} to='/profile'>Profile</MenuItem>\n                  <MenuItem onClick={handleClose}>Settings</MenuItem>\n                  <MenuItem onClick={() => handleClick()}>Logout</MenuItem>\n                </Menu>\n            </div> : <div></div>}\n    </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n        // <nav className=\"topnav\">\n        //   <ul className=\"links\">\n        //     <li>\n        //       <Link className=\"link\" to=\"/\">Home</Link>\n        //     </li>\n        //     <li>\n        //       <Link className=\"link\" to=\"/search\">Search</Link>\n        //     </li>\n\n        //     {logged ?\n        //     <div className=\"topnav-logged\">\n        //     <li>\n        //       <Link className=\"link\" to=\"/recs\">Recommendations</Link>\n        //     </li>\n        //     <li>\n        //       <Link className=\"link\" to=\"/favs\">Favorites</Link>\n        //     </li>\n        //     <li><Link className=\"link\" to=\"/ChatBot\">ChatBot</Link></li>\n        //     <li>\n        //     <div id=\"log\" className={classes.root}>\n        //     <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={onClick}>\n        //      <Avatar>{String(localStorage.getItem('user'))[0]}</Avatar>\n        //      </Button>\n        //         <Menu\n        //           id=\"simple-menu\"\n        //           anchorEl={anchorEl}\n        //           keepMounted\n        //           open={Boolean(anchorEl)}\n        //           onClose={handleClose}\n        //         >\n        //           <MenuItem component={Link} to='/profile'>Profile</MenuItem>\n        //           <MenuItem onClick={handleClose}>Settings</MenuItem>\n        //           <MenuItem onClick={() => handleClick()}>Logout</MenuItem>\n        //         </Menu>\n        //     </div>\n        //       {/*<Link className=\"link\" id=\"log\" onClick={() => handleClick()}>Logout</Link> */}\n        //     </li>\n        //     </div> :\n        //     <div className=\"topnav-right\">\n        //     <li>\n        //       <Link className=\"link\" id=\"log\" to=\"/login\">Login</Link>\n        //     </li>\n        //     <li>\n        //       <Link className=\"link\" id=\"reg\" to=\"/register\">Register</Link>\n        //     </li>\n        //     </div>}\n        //   </ul>\n        // </nav>\n      );\n\n\n\n\n  }\n","/Users/phamtay/Github/FooDecisive/frontend/src/components/Register/Register.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/Favorites/FavoritesList.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/services/authentication.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/RestaurantDetail/List.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/BigSearchBar/BigSearchBar.js",["179","180","181","182","183","184","185","186","187","188","189"],"import React, { useState } from 'react'\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Fade from 'react-reveal/Fade';\n\nimport './BigSearchBar.css';\nimport Map from '../RestaurantDetail/map'\n\nrequire('dotenv').config()\nconst { REACT_APP_GOOGLE_MAPS_API_KEY } = process.env;\nconst API_KEY = REACT_APP_GOOGLE_MAPS_API_KEY\n\n\nconst WhiteTextTypography = withStyles({\n  root: {\n    color: \"#FFFFFF\"\n  }\n})(Typography);\n\n\nconst google = window.google;\n\nexport function BigSearchBar(props) {\n\n\n\n  \n  const [term, setTerm] = useState('')\n  const [location, setLocation] = useState('')\n  const [sortBy, setSortBy] = useState('best_match')\n  //getCurrentLocation()\n  \n\n    // useEffect(() => {\n    //   const myElement = document.querySelector('#myElement')\n    //   init(myElement, { showCursor: false, strings: ['Welcome to Search!!', 'Yeah!' ] })\n    // }, [])\n\n    let sortByOptions = {\n        'Best Match': 'best_match',\n        'Highly Rated': 'rating',\n        'Most Reviewed': 'review_count'\n    }\n\n\n  //Get user location\n  const [lat, setLat] = useState('latitude')\n  const [lng, setLng] = useState('longitude')\n  //Get user location\n  function getCurrentLocation() {\n    navigator.geolocation.getCurrentPosition(\n      function (position) {\n        console.log(position);\n        fetch('https://maps.googleapis.com/maps/api/geocode/json?address=' + position.coords.latitude + ',' + position.coords.longitude + '&key=' + API_KEY)\n        .then((response) => response.json())\n        .then((responseJson) => {\n            console.log('ADDRESS GEOCODE' + JSON.stringify(responseJson.results[0].formatted_address))\n\n            setLocation(JSON.stringify(responseJson.results[0].formatted_address));\n          })\n          \n      },\n\n      function (error) {\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n      }\n    );\n  };\n  \n\n  // let sortByOptions = {\n  //   'Best Match': 'best_match',\n  //   'Highly Rated': 'rating',\n  //   'Most Reviewed': 'review_count'\n  // }\n\n  function getSortByClass(sortByOption) {\n    if (sortBy === sortByOption) {\n      return 'active';\n    } else {\n      return '';\n    }\n  }\n\n  function handleSortByChange(sortByOption) {\n    setSortBy(sortByOption)\n  }\n\n  function handleTermChange(e) {\n    setTerm(e.target.value)\n  }\n\n  function handleLocationChange(e) {\n    setLocation(e.target.value)\n  }\n\n  function handleSearch(e) {\n    props.searchYelp(term, location, sortBy);\n    e.preventDefault();\n  }\n\n    function validate() {\n      return term.length > 0 && location.length > 0;\n    }\n\n\n\n  const renderSortByOptions = () => {\n    return Object.keys(sortByOptions).map(sortByOption => {\n      let sortByOptionValue = sortByOptions[sortByOption];\n      return (<li key={sortByOptionValue} className={getSortByClass(sortByOptionValue)}\n        onClick={() => handleSortByChange(sortByOptionValue)}>{sortByOption}</li>);\n    });\n  }\n\n\n\n  return (\n    <Fade>\n    <div className=\"SearchBar\">\n      <div className=\"SearchBar-sort-options\">\n        <WhiteTextTypography variant=\"h2\" align=\"center\" id=\"myElement\" gutterBottom>\n          Welcome to Search!\n      </WhiteTextTypography>\n        <ul>\n          {renderSortByOptions()}\n        </ul>\n        <div className=\"SearchBar-fields\">\n        <input placeholder=\"Find\" onChange={handleTermChange} />\n        <input placeholder=\"Near\" value={location} onChange={handleLocationChange} />\n      </div>\n      <div className=\"SearchBar-submit\">\n        {/* <button style={{}} onClick={handleSearch} disabled={!validate()}>Search</button>\n        <button onClick={getCurrentLocation}> Current location</button> */}\n        <Button onClick={getCurrentLocation}>Set As Current location</Button> <br></br> <br></br>\n        <Button color=\"primary\" onClick={handleSearch} disabled={!validate()}>Search</Button>\n      </div>\n      </div>\n    </div>\n    </Fade>\n  );\n}\n\n// export function BigSearchBar() {\n//   const classes = useStyles();\n//   const [entry, setEntry] = useState(\"\");\n\n//   function validate(){\n//     return entry.length > 0;\n//   }\n\n//   function handleSubmit(){\n//     console.log(entry);\n//   }\n\n//   function onKeyUp(event) {\n//     if (event.charCode === 13) {\n//       this.setState({ inputValue: event.target.value });\n//     }\n//   }\n\n//   return (\n//     <Paper component=\"form\" className={classes.root} onSubmit={handleSubmit}>\n//       <InputBase\n//         className={classes.input}\n//         placeholder=\"Search restaurant\"\n//         inputProps={{ 'aria-label': 'big-search' }}\n//         onKeyPress={onKeyUp}\n//       />\n//       <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\" href='/search'>\n//         <SearchIcon />\n//       </IconButton>\n//     </Paper>\n//   );\n// }\n\n","/Users/phamtay/Github/FooDecisive/frontend/src/services/yelp.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/services/witai.js",["190"],"import { yelpREST } from './yelp';\n\nrequire('dotenv').config()\nconst { REACT_APP_WIT_AI_API_KEY } = process.env;\nconst responses = require('../responses.json');\n\nconst API_KEY = REACT_APP_WIT_AI_API_KEY\n\nexport const witaiREST = {\n    chat(query, userLocation){\n      return fetch(`https://api.wit.ai/message?v=20210218&q=${query}`,{\n        headers: {\n          Authorization: `Bearer ${API_KEY}`\n        }\n      }).then(response=>response.json())\n      .then(response => {\n        if(response.intents.length > 0){\n          console.log(response)\n          let intent = response.intents[0]['name']\n          let message = responses[intent]\n          if(intent == 'search'){\n            if(response.entities['wit$location:location']){\n              let location = response.entities['wit$location:location'][0]['value']\n              return yelpREST.search(response.entities['wit$search_query:search_query'][0]['value'],location,'best_match').then(response =>{\n                message = message.replace('#',location)\n                return{\n                  message:[{\n                    type:\"text\",\n                    content:message\n                  }],\n                  results:response\n                }\n              })\n            }\n          }\n        }\n      })\n    }\n};\n","/Users/phamtay/Github/FooDecisive/frontend/src/components/Favorites/FavoritesDetail.js",["191","192","193","194","195","196","197","198","199","200","201","202"],"import React, {useState, useEffect} from 'react';\nimport './FavoritesDetail.css';\nimport Card from '@material-ui/core/Card';\nimport { CardActionArea, DialogContent, Button } from '@material-ui/core';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Box from '@material-ui/core/Box';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport StarIcon from '@material-ui/icons/Star';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {authFetch, useAuth} from \"../../services/authentication\";\nimport Form from \"react-bootstrap/Form\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Map from '../RestaurantDetail/map'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  text: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport function FavoritesDetail(props) {\n    const [businessID, setBusinessID] = useState('')\n    const [review, setReview] = useState('')\n    const [rate, setRate] = useState('')\n\n    const [open, setOpen] = React.useState(false);\n    const [openRate, setOpenRate] = React.useState(false);\n    const fullWidth = true;\n\n    const [logged] = useAuth();\n    const [username, setUser] = useState(\"\");\n    const [favorite, setFavorite] = useState(false);\n    const [initfavorite, setInitFavorite] = useState(false);\n\n    const [selected, setSelected] = useState(false);\n\n    const classes = useStyles();\n\n    const handleOpen = (e) => {\n      setOpen(true);\n      console.log(props.business.id)\n      setBusinessID(props.business.id)\n    };\n\n    const handleClose = () => {\n      setOpen(false);\n      setOpenRate(false);\n    };\n\n    const handleRate = () => {\n      setOpen(false);\n      setOpenRate(true);\n    }\n\n    const handleReviewChange = (e) => {\n      setReview(e.target.value);\n    }\n\n    const handleRateChange = (e) => {\n      setRate(e.target.value);\n    }\n\n    function validate(){\n      return rate.length > 0 && review.length > 0 && review.length < 101;\n    }\n\n    useEffect(() => {\n      fetch(\"/test\").then(res => {\n          return res.json()\n      }).then(res => {\n          console.log(res)\n      })\n      authFetch(\"/api/protected\").then(response => {\n        if (response.status === 401){\n          setUser(\"Sorry you aren't authorized!\")\n          return null\n        }\n        return response.json()\n      }).then(response => {\n        if (response && response.message){\n          setUser(response.message)\n        }\n      })\n    }, [])\n\n    const onSubmitClick = (e) => {\n      e.preventDefault();\n      console.log(\"You pressed submit\");\n      console.log(`Rate: ${rate}`);\n      console.log(`Review: ${review}`);\n      setRate('');\n      setReview('');\n\n      console.log(\"You pressed login\")\n\n      let opts = {\n        'businessid': props.business.id,\n        'rating': rate,\n        'review': review\n      }\n      console.log(opts)\n\n      authFetch('/api/rate', {\n        method: 'post',\n        body: JSON.stringify(opts)\n      }).then(r => r.json())\n      .then(data => console.log(data))\n\n\n      handleClose();\n    }\n\n    const onFavoriteClick = (e) => {\n      e.preventDefault();\n      if (favorite === false) {\n        setFavorite(true)\n\n        let opts = {\n          'businessid': props.business.id,\n          'addFavorite': 'add'\n        }\n        console.log(opts);\n\n        authFetch('/api/favorites', {\n          method: 'post',\n          body: JSON.stringify(opts)\n        }).then(r => r.json())\n        .then(data => {\n          // setFavorite(data.favorite)\n          console.log(\"Added to favorites!\")\n        });\n      }\n      else {\n        setFavorite(false)\n        let opts = {\n          'businessid': props.business.id,\n          'addFavorite': 'delete'\n        }\n        console.log(opts);\n        authFetch('/api/favorites', {\n          method: 'post',\n          body: JSON.stringify(opts)\n        }).then(r => r.json())\n        \n        console.log('Deleted from favorites');\n        window.location.reload();\n      }  \n    }\n\n    // Check whether card is already a favorite\n      useEffect(() => {\n      authFetch(`/api/favorites?business_id=${props.business.id}`)\n      .then(response => response.json())\n      .then(data => setFavorite(data.favorite));\n      }, [])\n\n\n      return (\n        <div className='Business'>\n          <Card height='100px'>\n            <CardActionArea onClick={(e) => handleOpen(e)}>\n              <CardMedia\n                component='img'\n                height='140'\n                src={props.business.imageSrc}\n              />\n              <CardContent>\n                <Typography gutterBottom variant=\"h2\" component=\"h2\">\n                  {props.business.name}\n                </Typography>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  {props.business.address}\n                </Typography>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  {props.business.city}, {props.business.state} {props.business.zipCode}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handleRate}>\n                  Rate\n                </Button>\n                {!favorite ? <IconButton onClick={onFavoriteClick}>\n                  <StarBorderIcon style={{ color: '#fdd835' }} />\n                </IconButton>\n                : <IconButton onClick={onFavoriteClick}>\n                <StarIcon style={{ color: '#fdd835' }} />\n                </IconButton>}\n            </CardActions>\n          </Card>\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"business name\"\n            fullWidth={fullWidth}\n            className='custom-modal-style'\n          >\n            <DialogTitle id=\"simple-dialog-title\">\n            <Box display=\"flex\" alignItems=\"center\">\n                <Box flexGrow={1} >{props.business.name}</Box>\n                <Box>\n                  <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handleRate}>\n                    Rate\n                  </Button>\n                  {!favorite ? <IconButton onClick={onFavoriteClick}>\n                    <StarBorderIcon style={{ color: '#fdd835' }} />\n                  </IconButton>\n                  : <IconButton onClick={onFavoriteClick}>\n                  <StarIcon style={{ color: '#fdd835' }} />\n                  </IconButton>}\n                  <IconButton onClick={handleClose}>\n                    <CloseIcon />\n                  </IconButton>\n                </Box>\n            </Box>\n            </DialogTitle>\n            <DialogContent>\n              <div className={classes.root}>\n                <Grid container spacing={3}>\n                 <Grid item xs={12}>\n                  <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n                    {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n                  </Typography>\n                 </Grid>\n                 <Grid item xs={6}>\n                  <DialogContentText>\n                    Average rating: {props.business.rating}/5\n                  </DialogContentText>\n                  <DialogContentText>\n                    Genre: {props.business.category}\n                  </DialogContentText>\n                 </Grid>\n                 <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n                 <Grid item xs={12}>\n                 <Map\n                  id=\"myMap\"\n                  options={{\n                    center: { lat: parseFloat(props.business.latitude), lng: parseFloat(props.business.longitude) },\n                    zoom: 14\n                  }}\n                  onMapLoad={map => {\n                    var lat = parseFloat(props.business.latitude);\n                    var long = parseFloat(props.business.longitude);\n                    var marker = new window.google.maps.Marker({\n                      position: { lat: lat, lng: long },\n                      map: map,\n                      title: 'Restaurant here',\n                      setContent: 'Restaurant here'\n                    });\n                  }}\n                />\n\n                 </Grid>\n                </Grid>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog\n            open={openRate}\n            onClose={handleClose}\n            aria-labelledby=\"business name\"\n            fullWidth={fullWidth}\n            className='custom-modal-style'\n          >\n            <DialogTitle id=\"simple-dialog-title\">\n            <Box display=\"flex\" alignItems=\"center\">\n                <Box flexGrow={1} >{props.business.name}</Box>\n                <Box>\n                  <IconButton onClick={handleClose}>\n                    <CloseIcon />\n                  </IconButton>\n                </Box>\n            </Box>\n            </DialogTitle>\n            <DialogContent>\n              <div className={classes.root}>\n                <Grid container spacing={3}>\n                 <Grid item xs={12}>\n                  <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n                    {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n                  </Typography>\n                 </Grid>\n                 <Grid item xs={6}>\n                  <DialogContent>\n                    <Form onSubmit={onSubmitClick}>\n                      <Form.Group controlId=\"rate\">\n                        <Form.Label>Rate</Form.Label>\n                        {['radio'].map((type) =>(\n                          <div key={`inline-${type}`} className=\"mb-3\">\n                            <Form.Check inline value=\"1\" label=\"1\" type={type} name=\"radio\" id={`inline-${type}-1`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"2\" label=\"2\" type={type} name=\"radio\" id={`inline-${type}-2`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"3\" label=\"3\" type={type} name=\"radio\" id={`inline-${type}-3`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"4\" label=\"4\" type={type} name=\"radio\" id={`inline-${type}-4`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"5\" label=\"5\" type={type} name=\"radio\" id={`inline-${type}-5`} onChange={handleRateChange} />\n                          </div>\n                        ))}\n                      </Form.Group>\n                      <Form.Group controlId=\"review\">\n                        <Form.Label>Review</Form.Label>\n                        <Form.Control autoFocus type=\"text\" placeholder=\"Review (100 characters)\" value={review} onChange={handleReviewChange} />\n                      </Form.Group>\n                      <Button type=\"submit\" disabled={!validate()}>\n                        Submit\n                      </Button>\n                    </Form>\n                  </DialogContent>\n                 </Grid>\n                 <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n                </Grid>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      );\n  }\n      \n\n    // return (\n    //     <div className='Business'>\n    //       <Card height='100px'>\n    //         <CardActionArea onClick={(e) => handleOpen(e)}>\n    //           <CardMedia\n    //             component='img'\n    //             height='140'\n    //             src={props.business.imageSrc}\n    //           />\n    //           <CardContent>\n    //             <Typography gutterBottom variant=\"h2\" component=\"h2\">\n    //               {props.business.name}\n    //             </Typography>\n    //             <Typography gutterBottom variant=\"body2\" component=\"p\">\n    //               {props.business.address}\n    //             </Typography>\n    //             <Typography gutterBottom variant=\"body2\" component=\"p\">\n    //               {props.business.city}, {props.business.state} {props.business.zipCode}\n    //             </Typography>\n    //           </CardContent>\n    //         </CardActionArea>\n    //           {logged ?\n    //           <div>\n    //             <CardActions>\n    //             <Button size=\"small\" color=\"secondary\" onClick={handleRate}>\n    //               Rate\n    //             </Button>\n    //             {!favorite ? <Button size=\"small\" color='primary' onClick={handleFavorite}>\n    //               Add Favorite\n    //             </Button>\n    //             : <Button size=\"small\" color='primary' variant='outlined' onClick={handleFavorite}\n    //             >Favorite\n    //             </Button>}\n    //             </CardActions>\n    //           </div>\n    //           : <div></div>}\n    //       </Card>\n    //       <Dialog\n    //         open={open}\n    //         onClose={handleClose}\n    //         aria-labelledby=\"business name\"\n    //         fullWidth={fullWidth}\n    //         className='custom-modal-style'\n    //       >\n    //         <DialogTitle id=\"simple-dialog-title\">\n    //         <Box display=\"flex\" alignItems=\"center\">\n    //             <Box flexGrow={1} >{props.business.name}</Box>\n    //             <Box>\n    //             {logged ? <div>\n    //               <Button size=\"small\" color=\"primary\" onClick={handleRate}>\n    //                 Rate\n    //               </Button>\n    //               <IconButton>\n    //                 <StarOutlineIcon />\n    //               </IconButton>\n    //               <IconButton onClick={handleClose}>\n    //                 <CloseIcon />\n    //               </IconButton>\n    //               </div> : \n    //               <IconButton onClick={handleClose}>\n    //                 <CloseIcon />\n    //               </IconButton>\n    //             }\n    //             </Box>\n    //         </Box>\n    //         </DialogTitle>\n    //         <DialogContent>\n    //           <div className={classes.root}>\n    //             <Grid container spacing={3}>\n    //              <Grid item xs={12}>\n    //               <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n    //                 {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n    //               </Typography>\n    //              </Grid>\n    //              <Grid item xs={6}>\n    //               <DialogContentText>\n    //                 Average rating: {props.business.rating}/5\n    //               </DialogContentText>\n    //               <DialogContentText>\n    //                 Genre: {props.business.category}\n    //               </DialogContentText>\n    //              </Grid>\n    //              <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n    //              <Grid item xs={12}>(Google Maps API goes here)</Grid>\n    //             </Grid>\n    //           </div>\n    //         </DialogContent>\n    //       </Dialog>\n    //       <Dialog\n    //         open={openRate}\n    //         onClose={handleClose}\n    //         aria-labelledby=\"business name\"\n    //         fullWidth={fullWidth}\n    //         className='custom-modal-style'\n    //       >\n    //         <DialogTitle id=\"simple-dialog-title\">\n    //         <Box display=\"flex\" alignItems=\"center\">\n    //             <Box flexGrow={1} >{props.business.name}</Box>\n    //             <Box>\n    //               <IconButton onClick={handleClose}>\n    //                 <CloseIcon />\n    //               </IconButton>\n    //             </Box>\n    //         </Box>\n    //         </DialogTitle>\n    //         <DialogContent>\n    //           <div className={classes.root}>\n    //             <Grid container spacing={3}>\n    //              <Grid item xs={12}>\n    //               <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n    //                 {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n    //               </Typography>\n    //              </Grid>\n    //              <Grid item xs={6}>\n    //               <DialogContent>\n    //                 <Form onSubmit={onSubmitClick}>\n    //                   <Form.Group controlId=\"rate\">\n    //                     <Form.Label>Rate</Form.Label>\n    //                     {['radio'].map((type) =>(\n    //                       <div key={`inline-${type}`} className=\"mb-3\">\n    //                         <Form.Check inline value=\"1\" label=\"1\" type={type} name=\"radio\" id={`inline-${type}-1`} onChange={handleRateChange} />\n    //                         <Form.Check inline value=\"2\" label=\"2\" type={type} name=\"radio\" id={`inline-${type}-2`} onChange={handleRateChange} />\n    //                         <Form.Check inline value=\"3\" label=\"3\" type={type} name=\"radio\" id={`inline-${type}-3`} onChange={handleRateChange} />\n    //                         <Form.Check inline value=\"4\" label=\"4\" type={type} name=\"radio\" id={`inline-${type}-4`} onChange={handleRateChange} />\n    //                         <Form.Check inline value=\"5\" label=\"5\" type={type} name=\"radio\" id={`inline-${type}-5`} onChange={handleRateChange} />\n    //                       </div>\n    //                     ))}\n    //                   </Form.Group>\n    //                   <Form.Group controlId=\"review\">\n    //                     <Form.Label>Review</Form.Label>\n    //                     <Form.Control autoFocus type=\"text\" placeholder=\"Review (100 characters)\" value={review} onChange={handleReviewChange} />\n    //                   </Form.Group>\n    //                   <Button type=\"submit\" disabled={!validate()}>\n    //                     Submit\n    //                   </Button>\n    //                 </Form>\n    //               </DialogContent>\n    //              </Grid>\n    //              <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n    //             </Grid>\n    //           </div>\n    //         </DialogContent>\n    //       </Dialog>\n    //     </div>\n        // <div className=\"Business\">\n        //   <div className=\"image-container\">\n        //     <img src={props.business.imageSrc} alt=''/>\n        //   </div>\n        //   <h2>{props.business.name}</h2>\n        //   <div className=\"Business-information\">\n        //     <div className=\"Business-address\">\n        //       <p>{props.business.address}</p>\n        //       <p>{props.business.city}</p>\n        //       <p>{props.business.state} {props.business.zipCode}</p>\n        //     </div>\n        //     <div className=\"Business-reviews\">\n        //       <h3>{props.business.category.toUpperCase()}</h3>\n        //       <h3 className=\"rating\">{props.business.rating} stars</h3>\n        //       <p>{props.business.reviewCount} reviews</p>\n        //     </div>\n        //   </div>\n        // </div>\n        // );\n","/Users/phamtay/Github/FooDecisive/frontend/src/components/RestaurantDetail/map.js",["203","204"],"import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nrequire('dotenv').config()\nconst { REACT_APP_GOOGLE_MAPS_API_KEY } = process.env;\nconst API_KEY = REACT_APP_GOOGLE_MAPS_API_KEY\nconst google = window.google\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.onScriptLoad = this.onScriptLoad.bind(this)\n    }\n\n    onScriptLoad() {\n        const map = new window.google.maps.Map(\n            document.getElementById(this.props.id),\n            this.props.options);\n        this.props.onMapLoad(map)\n    }\n\n    componentDidMount() {\n        if (!window.google) {\n            var s = document.createElement('script');\n            s.type = 'text/javascript';\n            s.src = `https://maps.google.com/maps/api/js?key=${API_KEY}`;\n            var x = document.getElementsByTagName('script')[0];\n            x.parentNode.insertBefore(s, x);\n            s.addEventListener('load', e => {\n                this.onScriptLoad()\n            })\n        } else {\n            this.onScriptLoad()\n        }\n    }\n\n    render() {\n        return (\n            <div style={{ width: 550, height: 200 }} id={this.props.id} />\n        );\n    }\n}\n\nexport default Map","/Users/phamtay/Github/FooDecisive/frontend/src/components/RestaurantDetail/Detail.js",["205","206","207","208","209","210","211","212","213","214","215","216"],"import React, {useState, useEffect} from 'react';\nimport './Detail.css';\nimport Card from '@material-ui/core/Card';\nimport { CardActionArea, DialogContent, Button } from '@material-ui/core';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Box from '@material-ui/core/Box';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport StarIcon from '@material-ui/icons/Star';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {authFetch, useAuth} from \"../../services/authentication\";\nimport Form from \"react-bootstrap/Form\";\nimport Map from './map'\nimport AddIcon from '@material-ui/icons/Add';\nimport Rating from '@material-ui/lab/Rating';\nimport Slide from 'react-reveal/Slide';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  text: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport function Detail(props) {\n    const [businessID, setBusinessID] = useState('')\n    const [review, setReview] = useState('')\n    const [rate, setRate] = useState('')\n\n    const [open, setOpen] = React.useState(false);\n    const [openRate, setOpenRate] = React.useState(false);\n    const fullWidth = true;\n\n    const [logged] = useAuth();\n    const [username, setUser] = useState(\"\");\n    const [favorite, setFavorite] = useState(false);\n    const [initfavorite, setInitFavorite] = useState(false);\n\n    const [selected, setSelected] = useState(false);\n\n    const classes = useStyles();\n\n    const handleOpen = (e) => {\n      setOpen(true);\n      console.log(props.business.id)\n      setBusinessID(props.business.id)\n    };\n\n    const handleClose = () => {\n      setOpen(false);\n      setOpenRate(false);\n    };\n\n    const handleRate = () => {\n      setOpen(false);\n      setOpenRate(true);\n    }\n\n    const handleReviewChange = (e) => {\n      setReview(e.target.value);\n    }\n\n    const handleRateChange = (e) => {\n      setRate(e.target.value);\n    }\n\n    function validate(){\n      return Number(rate) > 0 && review.length > 0 && review.length < 101;\n    }\n\n    useEffect(() => {\n      fetch(\"/test\").then(res => {\n          return res.json()\n      }).then(res => {\n          console.log(res)\n      })\n      authFetch(\"/api/protected\").then(response => {\n        if (response.status === 401){\n          setUser(\"Sorry you aren't authorized!\")\n          return null\n        }\n        return response.json()\n      }).then(response => {\n        if (response && response.message){\n          setUser(response.message)\n        }\n      })\n    }, [])\n\n    const onSubmitClick = (e) => {\n      e.preventDefault();\n      console.log(\"You pressed submit\");\n      console.log(`Rate: ${rate}`);\n      console.log(`Review: ${review}`);\n      setRate('');\n      setReview('');\n\n      console.log(\"You pressed login\")\n\n      let opts = {\n        'businessid': props.business.id,\n        'rating': rate,\n        'review': review\n      }\n      console.log(opts)\n\n      authFetch('/api/rate', {\n        method: 'post',\n        body: JSON.stringify(opts)\n      }).then(r => r.json())\n      .then(data => console.log(data))\n\n\n      handleClose();\n    }\n\n    const onFavoriteClick = (e) => {\n      e.preventDefault();\n      if (favorite === false) {\n        setFavorite(true)\n\n        let opts = {\n          'businessid': props.business.id,\n          'addFavorite': 'add'\n        }\n        console.log(opts);\n\n        authFetch('/api/favorites', {\n          method: 'post',\n          body: JSON.stringify(opts)\n        }).then(r => r.json())\n        .then(data => {\n          console.log(data)\n          console.log(\"Added to favorites!\")\n        });\n        // setFavorite(true)\n      }\n      else {\n        setFavorite(false)\n        let opts = {\n          'businessid': props.business.id,\n          'addFavorite': 'delete'\n        }\n        console.log(opts);\n        authFetch('/api/favorites', {\n          method: 'post',\n          body: JSON.stringify(opts)\n        }).then(r => r.json())\n        .then(data => setFavorite(data.favorite));\n        \n        console.log('Deleted from favorites');\n      }  \n    }\n\n    // Check whether card is already a favorite\n      useEffect(() => {\n      authFetch(`/api/favorites?business_id=${props.business.id}`)\n      .then(response => response.json())\n      .then(data => setFavorite(data.favorite));\n      }, [])\n\n\n      return (\n        <Slide bottom>\n        <div className='Business'>\n          <Card height='100px'>\n            <CardActionArea onClick={(e) => handleOpen(e)}>\n              <CardMedia\n                component='img'\n                height='140'\n                src={props.business.imageSrc}\n              />\n              <CardContent>\n                <Typography gutterBottom variant=\"h2\" component=\"h2\">\n                  {props.business.name}\n                </Typography>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  {props.business.address}\n                </Typography>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  {props.business.city}, {props.business.state} {props.business.zipCode}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n              {logged ?\n              <div>\n                <CardActions>\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handleRate}>\n                  Rate\n                </Button>\n                {/* <IconButton onClick={onFavoriteClick}>\n                  <AddIcon style={{ color: '#fdd835' }} />\n                </IconButton> */}\n                {!favorite ? <IconButton onClick={onFavoriteClick}>\n                  <StarBorderIcon style={{ color: '#fdd835' }} />\n                </IconButton>\n                : <IconButton onClick={onFavoriteClick}>\n                <StarIcon style={{ color: '#fdd835' }} />\n                </IconButton>}\n                </CardActions>\n              </div>\n              : <div></div>}\n          </Card>\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"business name\"\n            fullWidth={fullWidth}\n            className='custom-modal-style'\n          >\n            <DialogTitle id=\"simple-dialog-title\">\n            <Box display=\"flex\" alignItems=\"center\">\n                <Box flexGrow={1} >{props.business.name}</Box>\n                <Box>\n                {logged ? <div>\n                  <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handleRate}>\n                    Rate\n                  </Button>\n                  {/* <IconButton onClick={onFavoriteClick}>\n                  <AddIcon style={{ color: '#fdd835' }} />\n                </IconButton> */}\n                  {!favorite ? <IconButton onClick={onFavoriteClick}>\n                    <StarBorderIcon style={{ color: '#fdd835' }} />\n                  </IconButton>\n                  : <IconButton onClick={onFavoriteClick}>\n                  <StarIcon style={{ color: '#fdd835' }} />\n                  </IconButton>}\n                  <IconButton onClick={handleClose}>\n                    <CloseIcon />\n                  </IconButton>\n                  </div> : \n                  <IconButton onClick={handleClose}>\n                    <CloseIcon />\n                  </IconButton>\n                }\n                </Box>\n            </Box>\n        </DialogTitle>\n        <DialogContent>\n          <div className={classes.root}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n                  {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <DialogContentText>\n                  Average rating: {props.business.rating}/5\n                  </DialogContentText>\n                 </Grid>\n                 <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n                 <Grid item xs={12}>\n                 <Map\n                  id=\"myMap\"\n                  options={{\n                    center: { lat: parseFloat(props.business.latitude), lng: parseFloat(props.business.longitude) },\n                    zoom: 14\n                  }}\n                  onMapLoad={map => {\n                    var lat = parseFloat(props.business.latitude);\n                    var long = parseFloat(props.business.longitude);\n                    var marker = new window.google.maps.Marker({\n                      position: { lat: lat, lng: long },\n                      map: map,\n                      title: 'Restaurant here',\n                      setContent: 'Restaurant here'\n                    });\n                  }}\n                />\n                </Grid>\n                </Grid>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog\n            open={openRate}\n            onClose={handleClose}\n            aria-labelledby=\"business name\"\n            fullWidth={fullWidth}\n            className='custom-modal-style'\n          >\n            <DialogTitle id=\"simple-dialog-title\">\n            <Box display=\"flex\" alignItems=\"center\">\n                <Box flexGrow={1} >{props.business.name}</Box>\n                <Box>\n                  <IconButton onClick={handleClose}>\n                    <CloseIcon />\n                  </IconButton>\n                </Box>\n            </Box>\n            </DialogTitle>\n            <DialogContent>\n              <div className={classes.root}>\n                <Grid container spacing={3}>\n                 <Grid item xs={12}>\n                  <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n                    {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n                  </Typography>\n                 </Grid>\n                 <Grid item xs={6}>\n                  <DialogContent>\n                    <Form onSubmit={onSubmitClick}>\n                      {/* <Form.Group controlId=\"rate\">\n                        <Form.Label>Rate</Form.Label>\n                        {['radio'].map((type) =>(\n                          <div key={`inline-${type}`} className=\"mb-3\">\n                            <Form.Check inline value=\"1\" label=\"1\" type={type} name=\"radio\" id={`inline-${type}-1`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"2\" label=\"2\" type={type} name=\"radio\" id={`inline-${type}-2`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"3\" label=\"3\" type={type} name=\"radio\" id={`inline-${type}-3`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"4\" label=\"4\" type={type} name=\"radio\" id={`inline-${type}-4`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"5\" label=\"5\" type={type} name=\"radio\" id={`inline-${type}-5`} onChange={handleRateChange} />\n                          </div>\n                        ))}\n                      </Form.Group> */}\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                          <Typography component=\"legend\">Rate</Typography>\n                          <Rating\n                            name=\"simple-controlled\"\n                            value={rate}\n                            onChange={(event, newValue) => {\n                              setRate(newValue);\n                            }}\n                          />\n                        </Box>\n                      <Form.Group controlId=\"review\">\n                        <Form.Label>Review</Form.Label>\n                        <Form.Control autoFocus type=\"text\" placeholder=\"Review (100 characters)\" value={review} onChange={handleReviewChange} />\n                      </Form.Group>\n                      <Button type=\"submit\" disabled={!validate()}>\n                        Submit\n                      </Button>\n                    </Form>\n                  </DialogContent>\n                 </Grid>\n                 <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n                </Grid>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n        </Slide>\n      );\n  }\n      \n","/Users/phamtay/Github/FooDecisive/frontend/src/components/ChatBot/ChatBot.js",["217","218"],"import React, { useState, useEffect } from 'react'\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport './ChatBot.css'\nimport { witaiREST } from '../../services/witai';\n\nrequire('dotenv').config()\nconst { REACT_APP_WIT_AI_API_KEY } = process.env;\n\n\nconst API_KEY = REACT_APP_WIT_AI_API_KEY\n\nexport function ChatBot(){\n  const [query, setQuery] = useState('')\n\n  function validate(){\n    return query.length > 0;\n  }\n\n  const onSubmitClick = (e)=>{\n    e.preventDefault()\n    console.log(\"You pressed submit\")\n    let parameter = encodeURIComponent(query.trim())\n    witaiREST.chat(parameter).then(response=>{\n      return JSON.parse(response);\n    }).then(response =>{\n      let intent = response.intents[0].name\n      document.getElementById(\"intent\").innerHTML = `Intent: ${intent}`\n      if(intent === 'search'){\n        let entities = response.entities\n        console.log(entities['wit$location:location'])\n        if('wit$location:location' in entities){\n          let entity = entities['wit$location:location'][0].body\n          document.getElementById(\"location\").innerHTML = `Location: ${entity}`\n        }\n        else{\n          document.getElementById(\"location\").innerHTML = ''\n        }\n        if('sortBy:sortBy' in entities){\n          let entity = entities['sortBy:sortBy'][0].body\n          document.getElementById('sortBy').innerHTML = `SortBy: ${entity}`\n        }\n        else{\n          document.getElementById('sortBy').innerHTML = ''\n        }\n        if('wit$search_query:search_query' in entities){\n          let entity = entities['wit$search_query:search_query'][0].body\n          document.getElementById('searchQuery').innerHTML = `Search query: ${entity}`\n        }\n        else{\n          document.getElementById('searchQuery').innerHTML = ''\n        }\n      }\n      else{\n        document.getElementById(\"location\").innerHTML = ''\n        document.getElementById('sortBy').innerHTML = ''\n        document.getElementById('searchQuery').innerHTML = ''\n      }\n    })\n  }\n\n  const handleQueryChange = (e) => {\n    setQuery(e.target.value)\n  }\n\n  return (\n    <div className=\"ChatBot\">\n      <Form onSubmit={onSubmitClick}>\n        <Form.Group controlId=\"query\">\n          <Form.Label>Query</Form.Label>\n          <Form.Control autoFocus type=\"text\" placeholder=\"Query\" value={query} onChange={handleQueryChange} />\n        </Form.Group>\n        <Button type=\"submit\" disabled={!validate()}>\n          Submit\n        </Button>\n      </Form>\n      <p id=\"intent\"></p>\n      <p id=\"location\"></p>\n      <p id=\"sortBy\"></p>\n      <p id=\"searchQuery\"></p>\n    </div>\n\n  )\n}\n","/Users/phamtay/Github/FooDecisive/frontend/src/Context.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/Hooks/useLocation.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/Recommendations/Recs.js",["219","220","221","222","223"],"import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {authFetch} from \"../../services/authentication\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { yelpBusID } from '../../services/yelp';\nimport {RecsList} from './RecsList';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '60%',\n    padding: '10px',\n    margin: 'auto'\n  },\n  text: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\nexport function Recs() {\n  const [results, setResults] = useState([]);\n  const classes = useStyles();\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    const signal = abortController.signal\n\n    authFetch(\"/api/recs\", { signal: signal }).then(res => {\n        return res.json()\n    }).then(res => {\n        console.log(res['recs'])\n        let businesses = res['recs']\n        \n        if (businesses !== undefined) {\n          let bus = []   \n          for(let i = 4; i < 7; i++) {\n            bus.push(yelpBusID.searchByID(businesses[i]))\n          }\n\n          Promise.all(bus).then((res) => {\n            return res\n          }).then((business) => {\n            setResults(business)\n          })\n        }\n\n    })\n\n\n    return function cleanup() {\n      abortController.abort()\n    }\n\n  }, [])\n\n  return(\n    <div>\n      {results.length != 0  ? <RecsList businesses={results} />\n      : <Container style={{margin: '0 auto', position: 'absolute', top: '50%', left: '50%'}}>\n        <CircularProgress style={{color: 'orange'}}/>\n        </Container>}\n    </div>\n  );\n    \n}\n      ","/Users/phamtay/Github/FooDecisive/frontend/src/components/Profile/Profile.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/Chat/Chat.js",["224","225","226","227","228"],"import React, {\n  useEffect,\n  useContext,\n  useReducer,\n  useCallback,\n  memo,\n  useRef,\n  useState\n} from \"react\";\nimport \"./Chat.css\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IoMdSend } from \"react-icons/io\";\nimport ResizableTextarea from \"../ResizableTextarea\";\nimport Bubble from \"../Bubble\";\nimport { witaiREST } from '../../services/witai';\nimport { List } from '../RestaurantDetail/List';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nimport logo from \"../../assets/logo.png\";\nimport {\n  BOT,\n  USER,\n  THINKING,\n  INIT_BUBBLES,\n  ERROR_BUBBLES\n} from \"../../Constants\";\nimport Context from \"../../Context\";\n\nconst ICON_COLOR = \"#4949e7\";\nconst NO_LOCATION_MESSAGE =\n  \"Oh, I can't access your location. 📍 Please allow me to access it so I can help you.\";\nconst ICON_SIZE = 32;\n\n// reducer and init state for the Chat component\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_BUBBLES\":\n      return { ...state, bubbles: action.payload };\n    case \"SET_SHOULD_SEND\":\n      return { ...state, shouldSend: action.payload };\n    case \"SET_BOT_RESPONSE\":\n      return { ...state, botResponse: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  bubbles: INIT_BUBBLES,\n  shouldSend: false,\n  botResponse: null\n};\n\n// helper functions\nconst filteredThinking = bubbles => [\n  ...bubbles.filter(b => b.type !== THINKING)\n];\n\nconst callApi = (input, userLocation) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      message: input,\n      user: { coordinates: userLocation }\n    })\n  };\n  const endpoint = process.env.REACT_APP_API_ENDPOINT;\n  return witaiREST.chat(encodeURIComponent(input.trim()),userLocation).then(response =>{\n    return response;\n  })\n};\n\n// memoizing the two presentational components\nconst Header = memo(() => (\n  <div className=\"header-chat\">\n    {/* <img src={logo} alt=\"Loa\" className=\"header-logo\" /> */}\n    <i class='fas fa-hamburger' style={{fontSize:'48px', paddingRight:'30px', color:'orange'}}></i>\n    <p className=\"header-chat-text\">Jessie</p>\n  </div>\n));\n\nconst BubbleContainer = memo(({ bubbles }) => (\n  <div className=\"bubbles-container\">\n    {bubbles.map((b, i) => (\n      <Bubble key={i} {...b} />\n    ))}\n  </div>\n));\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 1000,\n    height: 700,\n  },\n}));\n\n\nexport const Chat = () => {\n  const [results, setResults] = useState([])\n  const [{ bubbles, shouldSend, botResponse }, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n  // this ref will contain the message from the user\n  const messageRef = useRef(\"\");\n  // get location and restaurants setter from Context\n  const { userLocation, setRestaurants } = useContext(Context);\n\n  const handleSend = () => {\n    dispatch({\n      type: \"SET_BUBBLES\",\n      payload: [\n        { type: THINKING, content: null, bubbleType: \"text\" },\n        {\n          type: USER,\n          content: messageRef.current,\n          bubbleType: \"text\"\n        },\n        ...filteredThinking(bubbles)\n      ]\n    });\n    dispatch({ type: \"SET_SHOULD_SEND\", payload: false });\n  };\n\n  // wrapped in useCallback to not change on every render as a useEffect dependency (see below)\n  const handleSendMemo = useCallback(handleSend, [bubbles, dispatch]);\n\n  useEffect(() => {\n    if (shouldSend) handleSendMemo();\n  }, [shouldSend, handleSendMemo]);\n\n  const fetchRestaurantsMemo = useCallback(() => {\n    const inputValue = messageRef.current;\n    if (inputValue && inputValue !== \"\") {\n      if (userLocation !== null) {\n        const input = inputValue.substr(0, inputValue.length - 1); // Remove '\\n' caracter at the end\n        // fetch restaurants\n        callApi(input, userLocation)\n          .then(response => response)\n          .then(data => {\n            const resultsNew = data.results !== null ? data.results : [];\n            dispatch({ type: \"SET_BOT_RESPONSE\", payload: data.message });\n            setResults(resultsNew);\n          })\n          .catch(e => {\n            console.log(e);\n            dispatch({ type: \"SET_BOT_RESPONSE\", payload: ERROR_BUBBLES });\n            setRestaurants([]);\n          });\n      } else {\n        dispatch({\n          type: \"SET_BOT_RESPONSE\",\n          payload: [{ type: \"text\", content: NO_LOCATION_MESSAGE }]\n        });\n      }\n    }\n  }, [userLocation, dispatch, setRestaurants, messageRef]);\n\n  useEffect(() => {\n    if (bubbles.length > 1) {\n      const { type } = bubbles[0];\n      // user has sent last message, we stop thinking the previous ones ane push thinking to last (fetch restaurants)\n      if (type === THINKING) fetchRestaurantsMemo();\n    }\n  }, [bubbles, fetchRestaurantsMemo]);\n\n  // we received bots responses, and reset the bubbles\n  useEffect(() => {\n    if (botResponse !== null) {\n      let newBubbles = botResponse.map(b => ({\n        type: BOT,\n        bubbleType: b.type,\n        content: b.content\n      }));\n      newBubbles.push(...filteredThinking(bubbles));\n      dispatch({ type: \"SET_BUBBLES\", payload: newBubbles });\n      dispatch({ type: \"SET_BOT_RESPONSE\", payload: null });\n    }\n  }, [botResponse]);\n\n  // wrapped in callbakc because passed to ResizableTextarea, and shouldn't change on every render\n  const setShouldSendMemo = useCallback(\n    payload => dispatch({ type: \"SET_SHOULD_SEND\", payload }),\n    [dispatch]\n  );\n\n  const renderInput = () => (\n    <div className=\"chat-input-container\">\n      <ResizableTextarea\n        className=\"chat-input\"\n        placeholder=\"Send a message...\"\n        messageRef={messageRef}\n        setShouldSend={setShouldSendMemo}\n      />\n      <IoMdSend\n        className=\"send-logo\"\n        onClick={() => handleSend()}\n        color={ICON_COLOR}\n        size={ICON_SIZE}\n      />\n    </div>\n  );\n\n\n  const classes = useStyles();\n  return (\n    <div className=\"container\">\n      <div className=\"chat-container\">\n        <Header />\n        <BubbleContainer bubbles={bubbles} />\n        {renderInput()}\n      </div>\n      <div className=\"list-container\">\n      <GridList cellHeight={160} className={classes.gridList} cols={3}>\n        <List businesses={results} />\n      </GridList>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","/Users/phamtay/Github/FooDecisive/frontend/src/components/RestaurantContainer/RestaurantContainer.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/Recommendations/RecsList.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/Hooks/useLoading.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/Constants.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/Bubble/index.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/ResizableTextarea/index.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/Restaurant/index.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/Recommendations/RecsDetail.js",["229","230","231","232","233","234","235","236","237","238","239","240"],"import React, {useState, useEffect} from 'react';\nimport './RecsDetail.css';\nimport Card from '@material-ui/core/Card';\nimport { CardActionArea, DialogContent, Button } from '@material-ui/core';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Box from '@material-ui/core/Box';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport StarIcon from '@material-ui/icons/Star';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {authFetch, useAuth} from \"../../services/authentication\";\nimport Form from \"react-bootstrap/Form\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Map from '../RestaurantDetail/map'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  text: {\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport function RecsDetail(props) {\n    const [businessID, setBusinessID] = useState('')\n    const [review, setReview] = useState('')\n    const [rate, setRate] = useState('')\n\n    const [open, setOpen] = React.useState(false);\n    const [openRate, setOpenRate] = React.useState(false);\n    const fullWidth = true;\n\n    const [logged] = useAuth();\n    const [username, setUser] = useState(\"\");\n    const [favorite, setFavorite] = useState(false);\n    const [initfavorite, setInitFavorite] = useState(false);\n\n    const [selected, setSelected] = useState(false);\n\n    const classes = useStyles();\n\n    const handleOpen = (e) => {\n      setOpen(true);\n      console.log(props.business.id)\n      setBusinessID(props.business.id)\n    };\n\n    const handleClose = () => {\n      setOpen(false);\n      setOpenRate(false);\n    };\n\n    const handleRate = () => {\n      setOpen(false);\n      setOpenRate(true);\n    }\n\n    const handleReviewChange = (e) => {\n      setReview(e.target.value);\n    }\n\n    const handleRateChange = (e) => {\n      setRate(e.target.value);\n    }\n\n    function validate(){\n      return rate.length > 0 && review.length > 0 && review.length < 101;\n    }\n\n    useEffect(() => {\n      fetch(\"/test\").then(res => {\n          return res.json()\n      }).then(res => {\n          console.log(res)\n      })\n      authFetch(\"/api/protected\").then(response => {\n        if (response.status === 401){\n          setUser(\"Sorry you aren't authorized!\")\n          return null\n        }\n        return response.json()\n      }).then(response => {\n        if (response && response.message){\n          setUser(response.message)\n        }\n      })\n    }, [])\n\n    const onSubmitClick = (e) => {\n      e.preventDefault();\n      console.log(\"You pressed submit\");\n      console.log(`Rate: ${rate}`);\n      console.log(`Review: ${review}`);\n      setRate('');\n      setReview('');\n\n      console.log(\"You pressed login\")\n\n      let opts = {\n        'businessid': props.business.id,\n        'rating': rate,\n        'review': review\n      }\n      console.log(opts)\n\n      authFetch('/api/rate', {\n        method: 'post',\n        body: JSON.stringify(opts)\n      }).then(r => r.json())\n      .then(data => console.log(data))\n\n\n      handleClose();\n    }\n\n    const onFavoriteClick = (e) => {\n      e.preventDefault();\n      if (favorite === false) {\n        setFavorite(true)\n\n        let opts = {\n          'businessid': props.business.id,\n          'addFavorite': 'add'\n        }\n        console.log(opts);\n\n        authFetch('/api/favorites', {\n          method: 'post',\n          body: JSON.stringify(opts)\n        }).then(r => r.json())\n        .then(data => {\n          // setFavorite(data.favorite)\n          console.log(\"Added to favorites!\")\n        });\n      }\n      else {\n        setFavorite(false)\n        let opts = {\n          'businessid': props.business.id,\n          'addFavorite': 'delete'\n        }\n        console.log(opts);\n        authFetch('/api/favorites', {\n          method: 'post',\n          body: JSON.stringify(opts)\n        }).then(r => r.json())\n        \n        console.log('Deleted from favorites');\n        window.location.reload();\n      }  \n    }\n\n    // Check whether card is already a favorite\n      useEffect(() => {\n      authFetch(`/api/favorites?business_id=${props.business.id}`)\n      .then(response => response.json())\n      .then(data => setFavorite(data.favorite));\n      }, [])\n\n\n      return (\n        <div className='Business'>\n          <Card height='100px'>\n            <CardActionArea onClick={(e) => handleOpen(e)}>\n              <CardMedia\n                component='img'\n                height='140'\n                src={props.business.imageSrc}\n              />\n              <CardContent>\n                <Typography gutterBottom variant=\"h2\" component=\"h2\">\n                  {props.business.name}\n                </Typography>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  {props.business.address}\n                </Typography>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  {props.business.city}, {props.business.state} {props.business.zipCode}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handleRate}>\n                  Rate\n                </Button>\n                {!favorite ? <IconButton onClick={onFavoriteClick}>\n                  <StarBorderIcon style={{ color: '#fdd835' }} />\n                </IconButton>\n                : <IconButton onClick={onFavoriteClick}>\n                <StarIcon style={{ color: '#fdd835' }} />\n                </IconButton>}\n            </CardActions>\n          </Card>\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"business name\"\n            fullWidth={fullWidth}\n            className='custom-modal-style'\n          >\n            <DialogTitle id=\"simple-dialog-title\">\n            <Box display=\"flex\" alignItems=\"center\">\n                <Box flexGrow={1} >{props.business.name}</Box>\n                <Box>\n                  <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={handleRate}>\n                    Rate\n                  </Button>\n                  {!favorite ? <IconButton onClick={onFavoriteClick}>\n                    <StarBorderIcon style={{ color: '#fdd835' }} />\n                  </IconButton>\n                  : <IconButton onClick={onFavoriteClick}>\n                  <StarIcon style={{ color: '#fdd835' }} />\n                  </IconButton>}\n                  <IconButton onClick={handleClose}>\n                    <CloseIcon />\n                  </IconButton>\n                </Box>\n            </Box>\n            </DialogTitle>\n            <DialogContent>\n              <div className={classes.root}>\n                <Grid container spacing={3}>\n                 <Grid item xs={12}>\n                  <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n                    {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n                  </Typography>\n                 </Grid>\n                 <Grid item xs={6}>\n                  <DialogContentText>\n                    Average rating: {props.business.rating}/5\n                  </DialogContentText>\n                  <DialogContentText>\n                    Genre: {props.business.category}\n                  </DialogContentText>\n                 </Grid>\n                 <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n                 <Grid item xs={12}>\n                 <Map\n                  id=\"myMap\"\n                  options={{\n                    center: { lat: parseFloat(props.business.latitude), lng: parseFloat(props.business.longitude) },\n                    zoom: 14\n                  }}\n                  onMapLoad={map => {\n                    var lat = parseFloat(props.business.latitude);\n                    var long = parseFloat(props.business.longitude);\n                    var marker = new window.google.maps.Marker({\n                      position: { lat: lat, lng: long },\n                      map: map,\n                      title: 'Restaurant here',\n                      setContent: 'Restaurant here'\n                    });\n                  }}\n                />\n\n                 </Grid>\n                </Grid>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog\n            open={openRate}\n            onClose={handleClose}\n            aria-labelledby=\"business name\"\n            fullWidth={fullWidth}\n            className='custom-modal-style'\n          >\n            <DialogTitle id=\"simple-dialog-title\">\n            <Box display=\"flex\" alignItems=\"center\">\n                <Box flexGrow={1} >{props.business.name}</Box>\n                <Box>\n                  <IconButton onClick={handleClose}>\n                    <CloseIcon />\n                  </IconButton>\n                </Box>\n            </Box>\n            </DialogTitle>\n            <DialogContent>\n              <div className={classes.root}>\n                <Grid container spacing={3}>\n                 <Grid item xs={12}>\n                  <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n                    {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n                  </Typography>\n                 </Grid>\n                 <Grid item xs={6}>\n                  <DialogContent>\n                    <Form onSubmit={onSubmitClick}>\n                      <Form.Group controlId=\"rate\">\n                        <Form.Label>Rate</Form.Label>\n                        {['radio'].map((type) =>(\n                          <div key={`inline-${type}`} className=\"mb-3\">\n                            <Form.Check inline value=\"1\" label=\"1\" type={type} name=\"radio\" id={`inline-${type}-1`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"2\" label=\"2\" type={type} name=\"radio\" id={`inline-${type}-2`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"3\" label=\"3\" type={type} name=\"radio\" id={`inline-${type}-3`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"4\" label=\"4\" type={type} name=\"radio\" id={`inline-${type}-4`} onChange={handleRateChange} />\n                            <Form.Check inline value=\"5\" label=\"5\" type={type} name=\"radio\" id={`inline-${type}-5`} onChange={handleRateChange} />\n                          </div>\n                        ))}\n                      </Form.Group>\n                      <Form.Group controlId=\"review\">\n                        <Form.Label>Review</Form.Label>\n                        <Form.Control autoFocus type=\"text\" placeholder=\"Review (100 characters)\" value={review} onChange={handleReviewChange} />\n                      </Form.Group>\n                      <Button type=\"submit\" disabled={!validate()}>\n                        Submit\n                      </Button>\n                    </Form>\n                  </DialogContent>\n                 </Grid>\n                 <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n                </Grid>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      );\n  }\n      \n\n    // return (\n    //     <div className='Business'>\n    //       <Card height='100px'>\n    //         <CardActionArea onClick={(e) => handleOpen(e)}>\n    //           <CardMedia\n    //             component='img'\n    //             height='140'\n    //             src={props.business.imageSrc}\n    //           />\n    //           <CardContent>\n    //             <Typography gutterBottom variant=\"h2\" component=\"h2\">\n    //               {props.business.name}\n    //             </Typography>\n    //             <Typography gutterBottom variant=\"body2\" component=\"p\">\n    //               {props.business.address}\n    //             </Typography>\n    //             <Typography gutterBottom variant=\"body2\" component=\"p\">\n    //               {props.business.city}, {props.business.state} {props.business.zipCode}\n    //             </Typography>\n    //           </CardContent>\n    //         </CardActionArea>\n    //           {logged ?\n    //           <div>\n    //             <CardActions>\n    //             <Button size=\"small\" color=\"secondary\" onClick={handleRate}>\n    //               Rate\n    //             </Button>\n    //             {!favorite ? <Button size=\"small\" color='primary' onClick={handleFavorite}>\n    //               Add Favorite\n    //             </Button>\n    //             : <Button size=\"small\" color='primary' variant='outlined' onClick={handleFavorite}\n    //             >Favorite\n    //             </Button>}\n    //             </CardActions>\n    //           </div>\n    //           : <div></div>}\n    //       </Card>\n    //       <Dialog\n    //         open={open}\n    //         onClose={handleClose}\n    //         aria-labelledby=\"business name\"\n    //         fullWidth={fullWidth}\n    //         className='custom-modal-style'\n    //       >\n    //         <DialogTitle id=\"simple-dialog-title\">\n    //         <Box display=\"flex\" alignItems=\"center\">\n    //             <Box flexGrow={1} >{props.business.name}</Box>\n    //             <Box>\n    //             {logged ? <div>\n    //               <Button size=\"small\" color=\"primary\" onClick={handleRate}>\n    //                 Rate\n    //               </Button>\n    //               <IconButton>\n    //                 <StarOutlineIcon />\n    //               </IconButton>\n    //               <IconButton onClick={handleClose}>\n    //                 <CloseIcon />\n    //               </IconButton>\n    //               </div> : \n    //               <IconButton onClick={handleClose}>\n    //                 <CloseIcon />\n    //               </IconButton>\n    //             }\n    //             </Box>\n    //         </Box>\n    //         </DialogTitle>\n    //         <DialogContent>\n    //           <div className={classes.root}>\n    //             <Grid container spacing={3}>\n    //              <Grid item xs={12}>\n    //               <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n    //                 {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n    //               </Typography>\n    //              </Grid>\n    //              <Grid item xs={6}>\n    //               <DialogContentText>\n    //                 Average rating: {props.business.rating}/5\n    //               </DialogContentText>\n    //               <DialogContentText>\n    //                 Genre: {props.business.category}\n    //               </DialogContentText>\n    //              </Grid>\n    //              <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n    //              <Grid item xs={12}>(Google Maps API goes here)</Grid>\n    //             </Grid>\n    //           </div>\n    //         </DialogContent>\n    //       </Dialog>\n    //       <Dialog\n    //         open={openRate}\n    //         onClose={handleClose}\n    //         aria-labelledby=\"business name\"\n    //         fullWidth={fullWidth}\n    //         className='custom-modal-style'\n    //       >\n    //         <DialogTitle id=\"simple-dialog-title\">\n    //         <Box display=\"flex\" alignItems=\"center\">\n    //             <Box flexGrow={1} >{props.business.name}</Box>\n    //             <Box>\n    //               <IconButton onClick={handleClose}>\n    //                 <CloseIcon />\n    //               </IconButton>\n    //             </Box>\n    //         </Box>\n    //         </DialogTitle>\n    //         <DialogContent>\n    //           <div className={classes.root}>\n    //             <Grid container spacing={3}>\n    //              <Grid item xs={12}>\n    //               <Typography gutterBottom variant=\"body2\" component=\"p\" className={classes.text}>\n    //                 {props.business.address}, {props.business.city}, {props.business.state} {props.business.zipCode}\n    //               </Typography>\n    //              </Grid>\n    //              <Grid item xs={6}>\n    //               <DialogContent>\n    //                 <Form onSubmit={onSubmitClick}>\n    //                   <Form.Group controlId=\"rate\">\n    //                     <Form.Label>Rate</Form.Label>\n    //                     {['radio'].map((type) =>(\n    //                       <div key={`inline-${type}`} className=\"mb-3\">\n    //                         <Form.Check inline value=\"1\" label=\"1\" type={type} name=\"radio\" id={`inline-${type}-1`} onChange={handleRateChange} />\n    //                         <Form.Check inline value=\"2\" label=\"2\" type={type} name=\"radio\" id={`inline-${type}-2`} onChange={handleRateChange} />\n    //                         <Form.Check inline value=\"3\" label=\"3\" type={type} name=\"radio\" id={`inline-${type}-3`} onChange={handleRateChange} />\n    //                         <Form.Check inline value=\"4\" label=\"4\" type={type} name=\"radio\" id={`inline-${type}-4`} onChange={handleRateChange} />\n    //                         <Form.Check inline value=\"5\" label=\"5\" type={type} name=\"radio\" id={`inline-${type}-5`} onChange={handleRateChange} />\n    //                       </div>\n    //                     ))}\n    //                   </Form.Group>\n    //                   <Form.Group controlId=\"review\">\n    //                     <Form.Label>Review</Form.Label>\n    //                     <Form.Control autoFocus type=\"text\" placeholder=\"Review (100 characters)\" value={review} onChange={handleReviewChange} />\n    //                   </Form.Group>\n    //                   <Button type=\"submit\" disabled={!validate()}>\n    //                     Submit\n    //                   </Button>\n    //                 </Form>\n    //               </DialogContent>\n    //              </Grid>\n    //              <Grid item xs={6} justify-content='center'><img src={props.business.imageSrc} height='200px'/></Grid>\n    //             </Grid>\n    //           </div>\n    //         </DialogContent>\n    //       </Dialog>\n    //     </div>\n        // <div className=\"Business\">\n        //   <div className=\"image-container\">\n        //     <img src={props.business.imageSrc} alt=''/>\n        //   </div>\n        //   <h2>{props.business.name}</h2>\n        //   <div className=\"Business-information\">\n        //     <div className=\"Business-address\">\n        //       <p>{props.business.address}</p>\n        //       <p>{props.business.city}</p>\n        //       <p>{props.business.state} {props.business.zipCode}</p>\n        //     </div>\n        //     <div className=\"Business-reviews\">\n        //       <h3>{props.business.category.toUpperCase()}</h3>\n        //       <h3 className=\"rating\">{props.business.rating} stars</h3>\n        //       <p>{props.business.reviewCount} reviews</p>\n        //     </div>\n        //   </div>\n        // </div>\n        // );\n","/Users/phamtay/Github/FooDecisive/frontend/src/components/Restaurant/Restaurant.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/ResizableTextarea/ResizableTextarea.js",[],"/Users/phamtay/Github/FooDecisive/frontend/src/components/Bubble/Bubble.js",[],{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":2,"column":49,"nodeType":"247","messageId":"248","endLine":2,"endColumn":56},{"ruleId":"245","severity":1,"message":"249","line":2,"column":58,"nodeType":"247","messageId":"248","endLine":2,"endColumn":62},{"ruleId":"245","severity":1,"message":"250","line":9,"column":10,"nodeType":"247","messageId":"248","endLine":9,"endColumn":29},{"ruleId":"245","severity":1,"message":"251","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"252","line":44,"column":11,"nodeType":"247","messageId":"248","endLine":44,"endColumn":18},{"ruleId":"245","severity":1,"message":"253","line":4,"column":8,"nodeType":"247","messageId":"248","endLine":4,"endColumn":15},{"ruleId":"245","severity":1,"message":"254","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":18},{"ruleId":"245","severity":1,"message":"255","line":8,"column":8,"nodeType":"247","messageId":"248","endLine":8,"endColumn":18},{"ruleId":"245","severity":1,"message":"256","line":12,"column":7,"nodeType":"247","messageId":"248","endLine":12,"endColumn":16},{"ruleId":"257","severity":1,"message":"258","line":61,"column":23,"nodeType":"259","messageId":"260","endLine":61,"endColumn":25},{"ruleId":"245","severity":1,"message":"251","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"261","line":3,"column":22,"nodeType":"247","messageId":"248","endLine":3,"endColumn":27},{"ruleId":"245","severity":1,"message":"262","line":3,"column":35,"nodeType":"247","messageId":"248","endLine":3,"endColumn":53},{"ruleId":"245","severity":1,"message":"263","line":7,"column":10,"nodeType":"247","messageId":"248","endLine":7,"endColumn":17},{"ruleId":"245","severity":1,"message":"264","line":8,"column":8,"nodeType":"247","messageId":"248","endLine":8,"endColumn":19},{"ruleId":"245","severity":1,"message":"265","line":9,"column":10,"nodeType":"247","messageId":"248","endLine":9,"endColumn":17},{"ruleId":"245","severity":1,"message":"266","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":20},{"ruleId":"245","severity":1,"message":"267","line":43,"column":12,"nodeType":"247","messageId":"248","endLine":43,"endColumn":26},{"ruleId":"245","severity":1,"message":"268","line":43,"column":28,"nodeType":"247","messageId":"248","endLine":43,"endColumn":38},{"ruleId":"245","severity":1,"message":"269","line":11,"column":22,"nodeType":"247","messageId":"248","endLine":11,"endColumn":29},{"ruleId":"245","severity":1,"message":"270","line":34,"column":10,"nodeType":"247","messageId":"248","endLine":34,"endColumn":18},{"ruleId":"245","severity":1,"message":"271","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":20},{"ruleId":"245","severity":1,"message":"261","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":13},{"ruleId":"245","severity":1,"message":"272","line":4,"column":8,"nodeType":"247","messageId":"248","endLine":4,"endColumn":17},{"ruleId":"245","severity":1,"message":"273","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":18},{"ruleId":"245","severity":1,"message":"274","line":6,"column":8,"nodeType":"247","messageId":"248","endLine":6,"endColumn":18},{"ruleId":"245","severity":1,"message":"275","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":11},{"ruleId":"245","severity":1,"message":"276","line":26,"column":7,"nodeType":"247","messageId":"248","endLine":26,"endColumn":13},{"ruleId":"245","severity":1,"message":"277","line":52,"column":10,"nodeType":"247","messageId":"248","endLine":52,"endColumn":13},{"ruleId":"245","severity":1,"message":"278","line":52,"column":15,"nodeType":"247","messageId":"248","endLine":52,"endColumn":21},{"ruleId":"245","severity":1,"message":"279","line":53,"column":10,"nodeType":"247","messageId":"248","endLine":53,"endColumn":13},{"ruleId":"245","severity":1,"message":"280","line":53,"column":15,"nodeType":"247","messageId":"248","endLine":53,"endColumn":21},{"ruleId":"257","severity":1,"message":"281","line":21,"column":21,"nodeType":"259","messageId":"260","endLine":21,"endColumn":23},{"ruleId":"245","severity":1,"message":"253","line":21,"column":8,"nodeType":"247","messageId":"248","endLine":21,"endColumn":15},{"ruleId":"245","severity":1,"message":"282","line":35,"column":12,"nodeType":"247","messageId":"248","endLine":35,"endColumn":22},{"ruleId":"245","severity":1,"message":"283","line":43,"column":12,"nodeType":"247","messageId":"248","endLine":43,"endColumn":18},{"ruleId":"245","severity":1,"message":"270","line":44,"column":12,"nodeType":"247","messageId":"248","endLine":44,"endColumn":20},{"ruleId":"245","severity":1,"message":"284","line":46,"column":12,"nodeType":"247","messageId":"248","endLine":46,"endColumn":24},{"ruleId":"245","severity":1,"message":"285","line":46,"column":26,"nodeType":"247","messageId":"248","endLine":46,"endColumn":41},{"ruleId":"245","severity":1,"message":"286","line":48,"column":12,"nodeType":"247","messageId":"248","endLine":48,"endColumn":20},{"ruleId":"245","severity":1,"message":"287","line":48,"column":22,"nodeType":"247","messageId":"248","endLine":48,"endColumn":33},{"ruleId":"288","severity":1,"message":"289","line":168,"column":10,"nodeType":"290","endLine":168,"endColumn":12,"suggestions":"291"},{"ruleId":"292","severity":1,"message":"293","line":246,"column":61,"nodeType":"294","endLine":246,"endColumn":112},{"ruleId":"245","severity":1,"message":"295","line":257,"column":25,"nodeType":"247","messageId":"248","endLine":257,"endColumn":31},{"ruleId":"292","severity":1,"message":"293","line":321,"column":61,"nodeType":"294","endLine":321,"endColumn":112},{"ruleId":"245","severity":1,"message":"296","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":16},{"ruleId":"245","severity":1,"message":"276","line":7,"column":7,"nodeType":"247","messageId":"248","endLine":7,"endColumn":13},{"ruleId":"245","severity":1,"message":"253","line":22,"column":8,"nodeType":"247","messageId":"248","endLine":22,"endColumn":15},{"ruleId":"245","severity":1,"message":"282","line":37,"column":12,"nodeType":"247","messageId":"248","endLine":37,"endColumn":22},{"ruleId":"245","severity":1,"message":"270","line":46,"column":12,"nodeType":"247","messageId":"248","endLine":46,"endColumn":20},{"ruleId":"245","severity":1,"message":"284","line":48,"column":12,"nodeType":"247","messageId":"248","endLine":48,"endColumn":24},{"ruleId":"245","severity":1,"message":"285","line":48,"column":26,"nodeType":"247","messageId":"248","endLine":48,"endColumn":41},{"ruleId":"245","severity":1,"message":"286","line":50,"column":12,"nodeType":"247","messageId":"248","endLine":50,"endColumn":20},{"ruleId":"245","severity":1,"message":"287","line":50,"column":22,"nodeType":"247","messageId":"248","endLine":50,"endColumn":33},{"ruleId":"245","severity":1,"message":"297","line":74,"column":11,"nodeType":"247","messageId":"248","endLine":74,"endColumn":27},{"ruleId":"288","severity":1,"message":"289","line":171,"column":10,"nodeType":"290","endLine":171,"endColumn":12,"suggestions":"298"},{"ruleId":"292","severity":1,"message":"293","line":263,"column":61,"nodeType":"294","endLine":263,"endColumn":112},{"ruleId":"245","severity":1,"message":"295","line":274,"column":25,"nodeType":"247","messageId":"248","endLine":274,"endColumn":31},{"ruleId":"292","severity":1,"message":"293","line":347,"column":61,"nodeType":"294","endLine":347,"endColumn":112},{"ruleId":"245","severity":1,"message":"251","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"299","line":11,"column":7,"nodeType":"247","messageId":"248","endLine":11,"endColumn":14},{"ruleId":"245","severity":1,"message":"253","line":4,"column":8,"nodeType":"247","messageId":"248","endLine":4,"endColumn":15},{"ruleId":"245","severity":1,"message":"254","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":18},{"ruleId":"245","severity":1,"message":"255","line":8,"column":8,"nodeType":"247","messageId":"248","endLine":8,"endColumn":18},{"ruleId":"245","severity":1,"message":"252","line":27,"column":9,"nodeType":"247","messageId":"248","endLine":27,"endColumn":16},{"ruleId":"257","severity":1,"message":"258","line":63,"column":23,"nodeType":"259","messageId":"260","endLine":63,"endColumn":25},{"ruleId":"245","severity":1,"message":"300","line":18,"column":8,"nodeType":"247","messageId":"248","endLine":18,"endColumn":20},{"ruleId":"245","severity":1,"message":"301","line":20,"column":8,"nodeType":"247","messageId":"248","endLine":20,"endColumn":12},{"ruleId":"245","severity":1,"message":"302","line":61,"column":9,"nodeType":"247","messageId":"248","endLine":61,"endColumn":23},{"ruleId":"245","severity":1,"message":"303","line":69,"column":9,"nodeType":"247","messageId":"248","endLine":69,"endColumn":17},{"ruleId":"288","severity":1,"message":"304","line":190,"column":6,"nodeType":"290","endLine":190,"endColumn":19,"suggestions":"305"},{"ruleId":"245","severity":1,"message":"253","line":21,"column":8,"nodeType":"247","messageId":"248","endLine":21,"endColumn":15},{"ruleId":"245","severity":1,"message":"282","line":35,"column":12,"nodeType":"247","messageId":"248","endLine":35,"endColumn":22},{"ruleId":"245","severity":1,"message":"283","line":43,"column":12,"nodeType":"247","messageId":"248","endLine":43,"endColumn":18},{"ruleId":"245","severity":1,"message":"270","line":44,"column":12,"nodeType":"247","messageId":"248","endLine":44,"endColumn":20},{"ruleId":"245","severity":1,"message":"284","line":46,"column":12,"nodeType":"247","messageId":"248","endLine":46,"endColumn":24},{"ruleId":"245","severity":1,"message":"285","line":46,"column":26,"nodeType":"247","messageId":"248","endLine":46,"endColumn":41},{"ruleId":"245","severity":1,"message":"286","line":48,"column":12,"nodeType":"247","messageId":"248","endLine":48,"endColumn":20},{"ruleId":"245","severity":1,"message":"287","line":48,"column":22,"nodeType":"247","messageId":"248","endLine":48,"endColumn":33},{"ruleId":"288","severity":1,"message":"289","line":168,"column":10,"nodeType":"290","endLine":168,"endColumn":12,"suggestions":"306"},{"ruleId":"292","severity":1,"message":"293","line":246,"column":61,"nodeType":"294","endLine":246,"endColumn":112},{"ruleId":"245","severity":1,"message":"295","line":257,"column":25,"nodeType":"247","messageId":"248","endLine":257,"endColumn":31},{"ruleId":"292","severity":1,"message":"293","line":321,"column":61,"nodeType":"294","endLine":321,"endColumn":112},"no-native-reassign",["307"],"no-negated-in-lhs",["308"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'RestaurantContainer' is defined but never used.","'useEffect' is defined but never used.","'classes' is assigned a value but never used.","'AddIcon' is defined but never used.","'Pagination' is defined but never used.","'Typography' is defined but never used.","'useStyles' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Paper' is defined but never used.","'requirePropFactory' is defined but never used.","'spacing' is defined but never used.","'CardContent' is defined but never used.","'shadows' is defined but never used.","'FavoriteIcon' is defined but never used.","'currentMessage' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'NavItem' is defined but never used.","'username' is assigned a value but never used.","'makeStyles' is defined but never used.","'InputBase' is defined but never used.","'IconButton' is defined but never used.","'SearchIcon' is defined but never used.","'Map' is defined but never used.","'google' is assigned a value but never used.","'lat' is assigned a value but never used.","'setLat' is assigned a value but never used.","'lng' is assigned a value but never used.","'setLng' is assigned a value but never used.","Expected '===' and instead saw '=='.","'businessID' is assigned a value but never used.","'logged' is assigned a value but never used.","'initfavorite' is assigned a value but never used.","'setInitFavorite' is assigned a value but never used.","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.business.id'. Either include it or remove the dependency array.","ArrayExpression",["309"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'marker' is assigned a value but never used.","'render' is defined but never used.","'handleRateChange' is assigned a value but never used.",["310"],"'API_KEY' is assigned a value but never used.","'GridListTile' is defined but never used.","'logo' is defined but never used.","'requestOptions' is assigned a value but never used.","'endpoint' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'bubbles'. Either include it or remove the dependency array.",["311"],["312"],"no-global-assign","no-unsafe-negation",{"desc":"313","fix":"314"},{"desc":"313","fix":"315"},{"desc":"316","fix":"317"},{"desc":"313","fix":"318"},"Update the dependencies array to be: [props.business.id]",{"range":"319","text":"320"},{"range":"321","text":"320"},"Update the dependencies array to be: [botResponse, bubbles]",{"range":"322","text":"323"},{"range":"324","text":"320"},[4721,4723],"[props.business.id]",[4806,4808],[5428,5441],"[botResponse, bubbles]",[4711,4713]]