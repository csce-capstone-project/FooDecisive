"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var defaultStore_1 = require("./utils/defaultStore");
exports.createAuthProvider = function (_a) {
    var _b;
    var accessTokenExpireKey = _a.accessTokenExpireKey, accessTokenKey = _a.accessTokenKey, _c = _a.localStorageKey, localStorageKey = _c === void 0 ? 'REACT_TOKEN_AUTH_KEY' : _c, onUpdateToken = _a.onUpdateToken, _d = _a.storage, storage = _d === void 0 ? defaultStore_1.createDefaultStore((_b = {}, _b[localStorageKey] = localStorage.getItem(localStorageKey), _b)) : _d, customFetch = _a.customFetch;
    var tp = createTokenProvider({
        accessTokenExpireKey: accessTokenExpireKey,
        accessTokenKey: accessTokenKey,
        localStorageKey: localStorageKey,
        onUpdateToken: onUpdateToken,
        storage: storage
    });
    var login = function (newTokens) {
        tp.setToken(newTokens);
    };
    var logout = function () {
        tp.setToken(null);
    };
    var authFetch = function (input, init) { return __awaiter(void 0, void 0, void 0, function () {
        var token;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tp.getToken()];
                case 1:
                    token = _a.sent();
                    init = init || {};
                    init.headers = __assign(__assign({}, init.headers), { Authorization: "Bearer " + token });
                    if (customFetch) {
                        return [2 /*return*/, customFetch(input, init)];
                    }
                    return [2 /*return*/, fetch(input, init)];
            }
        });
    }); };
    var useAuth = function () {
        var _a = react_1.useState(tp.isLoggedIn()), isLogged = _a[0], setIsLogged = _a[1];
        var listener = react_1.useCallback(function (newIsLogged) {
            setIsLogged(newIsLogged);
        }, [setIsLogged]);
        react_1.useEffect(function () {
            tp.subscribe(listener);
            return function () {
                tp.unsubscribe(listener);
            };
        }, [listener]);
        return [isLogged];
    };
    return [useAuth, authFetch, login, logout];
};
var createTokenProvider = function (_a) {
    var localStorageKey = _a.localStorageKey, accessTokenKey = _a.accessTokenKey, accessTokenExpireKey = _a.accessTokenExpireKey, onUpdateToken = _a.onUpdateToken, storage = _a.storage;
    var listeners = [];
    var getTokenInternal = function () {
        var data = storage.getItem(localStorageKey);
        var token = (data && JSON.parse(data)) || null;
        return token;
    };
    var subscribe = function (listener) {
        listeners.push(listener);
    };
    var unsubscribe = function (listener) {
        listeners = listeners.filter(function (l) { return l !== listener; });
    };
    var jwtExp = function (token) {
        if (!(typeof token === 'string')) {
            return null;
        }
        var split = token.split('.');
        if (split.length < 2) {
            return null;
        }
        try {
            var jwt = JSON.parse(atob(token.split('.')[1]));
            if (jwt && jwt.exp && Number.isFinite(jwt.exp)) {
                return jwt.exp * 1000;
            }
            else {
                return null;
            }
        }
        catch (e) {
            return null;
        }
    };
    var getExpire = function (token) {
        if (!token) {
            return null;
        }
        if (accessTokenExpireKey) {
            // @ts-ignore
            return token[accessTokenExpireKey];
        }
        if (accessTokenKey) {
            // @ts-ignore
            var exp = jwtExp(token[accessTokenKey]);
            if (exp) {
                return exp;
            }
        }
        return jwtExp(token);
    };
    var isExpired = function (exp) {
        if (!exp) {
            return false;
        }
        return Date.now() > exp;
    };
    var checkExpiry = function () { return __awaiter(void 0, void 0, void 0, function () {
        var token, newToken, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    token = getTokenInternal();
                    if (!(token && isExpired(getExpire(token)))) return [3 /*break*/, 4];
                    if (!onUpdateToken) return [3 /*break*/, 2];
                    return [4 /*yield*/, onUpdateToken(token)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _a = null;
                    _b.label = 3;
                case 3:
                    newToken = _a;
                    if (newToken) {
                        setToken(newToken);
                    }
                    else {
                        storage.removeItem(localStorageKey);
                    }
                    _b.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    }); };
    var getToken = function () { return __awaiter(void 0, void 0, void 0, function () {
        var token;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, checkExpiry()];
                case 1:
                    _a.sent();
                    if (accessTokenKey) {
                        token = getTokenInternal();
                        // @ts-ignore
                        return [2 /*return*/, token && token[accessTokenKey]];
                    }
                    return [2 /*return*/, getTokenInternal()];
            }
        });
    }); };
    var isLoggedIn = function () {
        return !!getTokenInternal();
    };
    var setToken = function (token) {
        if (token) {
            storage.setItem(localStorageKey, JSON.stringify(token));
        }
        else {
            storage.removeItem(localStorageKey);
        }
        notify();
    };
    var notify = function () {
        var isLogged = isLoggedIn();
        listeners.forEach(function (l) { return l(isLogged); });
    };
    return {
        getToken: getToken,
        isLoggedIn: isLoggedIn,
        setToken: setToken,
        subscribe: subscribe,
        unsubscribe: unsubscribe,
    };
};
